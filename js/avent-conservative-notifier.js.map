{"version":3,"sources":["../ts/avent-conservative-notifier.ts"],"names":[],"mappings":";;AAMA,qDAAiD;AAajD,MAAa,yBAAmC,SAAQ,8BAAgB;IA4BvE,YAAmB,cAAyB,EAAE,eAA0B;QAEvE,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IAEtB,CAAC;IASM,SAAS,CAAC,OAA2B;QAE3C,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YAErD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,cAAc,EAAE,CAAC;SAEtB;QAED,OAAO,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAEjC,CAAC;IASM,WAAW,CAAC,YAAkC;QAEpD,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE;YAExD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,eAAe,EAAE,CAAC;SAEvB;QAED,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;IAEjC,CAAC;IAOM,SAAS;QAEf,OAAO,IAAI,CAAC,OAAO,CAAC;IAErB,CAAC;CAED;AAzFD,8DAyFC","file":"avent-conservative-notifier.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t3:06 PM -- June 21st, 2019.\n *\tWebsite: avents\n */\n\nimport { AventNotifier } from \"./avent-notifier\";\nimport { AventSubscription } from \"./avent-subscription\";\n\n/**\n * An {@link AventNotifier} that only listens for avents when there are active subscriptions.\n *\n * This is often useful when working with DOM event listeners - AventConservativeNotifiers will only register avent\n * listeners on elements when there are active subscriptions to said AventConservativeNotifier.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class AventConservativeNotifier<E = any> extends AventNotifier<E> {\n\t\n\t/**\n\t * The function that enables avent listening/incoming avents for this AventConservativeNotifier.\n\t */\n\tprivate readonly enableFunction: () => any;\n\t\n\t/**\n\t * The function that disables avent listening/incoming avents for this AventConservativeNotifier.\n\t */\n\tprivate readonly disableFunction: () => any;\n\t\n\t/**\n\t * A boolean value indicating whether or not this AventConservativeNotifier is currently enabled (is listening for\n\t * avents).\n\t */\n\tprivate enabled: boolean;\n\t\n\t/**\n\t * Initializes a new AventConservativeNotifier with a given enable and disable function.\n\t *\n\t * Care should be taken when creating new instances or subtypes of this class to ensure that the disable function\n\t * effectively and fully reverses/disables whatever actions the enable function took to direct avents to this\n\t * class/instance.\n\t *\n\t * @param enableFunction A function responsible for enabling incoming avents to this instance.\n\t * @param disableFunction A function responsible for disabling incoming avents to this instance.\n\t */\n\tpublic constructor(enableFunction: () => any, disableFunction: () => any) {\n\t\t\n\t\tsuper();\n\t\t\n\t\tthis.enableFunction = enableFunction;\n\t\tthis.disableFunction = disableFunction;\n\t\tthis.enabled = false;\n\t\t\n\t}\n\t\n\t/**\n\t * Creates and returns an {@link AventSubscription} to this AventNotifier that will be notified whenever avents are\n\t * dispatched on this object, and conditionally enables incoming input if incoming avents are not already enabled.\n\t *\n\t * @param handler A function that will handle the incoming avent.\n\t * @return An AventSubscription to this AventConservativeNotifier.\n\t */\n\tpublic subscribe(handler: (avent: E) => void): AventSubscription<E> {\n\t\t\n\t\tif ((this.subscriptionCount() <= 0) && !this.enabled) {\n\t\t\t\n\t\t\tthis.enabled = true;\n\t\t\tthis.enableFunction();\n\t\t\t\n\t\t}\n\t\t\n\t\treturn super.subscribe(handler);\n\t\t\n\t}\n\t\n\t/**\n\t * Unsubscribes/unlinks the provided {@link AventSubscription} from this AventNotifier so that said subscription\n\t * will no longer be notified of any new incoming avents to this AventNotifier. Conditionally disables incoming\n\t * input if incoming avents are not already disabled.\n\t *\n\t * @param subscription The AventSubscription to unsubscribe from this AventNotifier.\n\t */\n\tpublic unsubscribe(subscription: AventSubscription<E>): void {\n\t\t\n\t\tif ((this.subscriptionCount() - 1 >= 0) && this.enabled) {\n\t\t\t\n\t\t\tthis.enabled = false;\n\t\t\tthis.disableFunction();\n\t\t\t\n\t\t}\n\t\t\n\t\tsuper.unsubscribe(subscription);\n\t\t\n\t}\n\t\n\t/**\n\t * Returns true if this AventConservativeNotifier is currently enabled (is listening for avents).\n\t *\n\t * @return true if this AventConservativeNotifier is currently enabled (is listening for avents).\n\t */\n\tpublic isEnabled(): boolean {\n\t\t\n\t\treturn this.enabled;\n\t\t\n\t}\n\t\n}"]}