{"version":3,"sources":["../ts/avent-notifier.ts"],"names":[],"mappings":";;AAMA,6DAAyD;AAWzD,MAAa,aAAa;IAkBzB;QAbQ,YAAO,GAA0B,EAAE,CAAC;QAQ3B,kBAAa,GAAgC,EAAE,CAAC;IAKxB,CAAC;IAQnC,MAAM,CAAC,KAAQ;QAGrB,KAAK,IAAI,MAAM,IAAI,IAAI,CAAC,OAAO;YAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;gBAAE,OAAO;QAGnE,KAAK,IAAI,YAAY,IAAI,IAAI,CAAC,aAAa;YAAE,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAE9E,CAAC;IAOM,MAAM,CAAC,MAAsB;QAEnC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAE3B,CAAC;IASM,SAAS,CAAC,OAA2B;QAE3C,IAAI,YAAY,GAAyB,IAAI,sCAAiB,CAAI,IAAI,EAAE,OAAO,CAAC,CAAC;QAEjF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAEtC,OAAO,YAAY,CAAC;IAErB,CAAC;IAQM,WAAW,CAAC,YAAkC;QAEpD,IAAI,OAAO,GAAW,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAC/D,IAAI,OAAO,GAAG,CAAC,CAAC;YAAE,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;IAEzD,CAAC;IAOM,iBAAiB;QAEvB,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;IAElC,CAAC;IAQM,gBAAgB;QAEtB,OAAO,IAAI,CAAC;IAEb,CAAC;CAED;AApGD,sCAoGC","file":"avent-notifier.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t4:45 PM -- January 16th, 2019.\n *\tProject: avents\n */\n\nimport { AventSubscription } from \"./avent-subscription\";\nimport { AventFilter } from \"./avent-filter\";\nimport { AventSource } from \"./avent-source\";\n\n/**\n * A source for avents that are distributed to multiple {@link AventSubscription}s (event handlers).\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class AventNotifier<E = any> implements AventSource {\n\t\n\t/**\n\t * The {@link AventFilter}s that have been added to this AventNotifier.\n\t */\n\tprivate filters: Array<AventFilter<E>> = [];\n\t\n\t/**\n\t * The {@link AventSubscription}s that have been created with/linked to this AventSubscription.\n\t *\n\t * This AventNotifier is responsible for notifying any AventSubscriptions in this array with any new avents that it\n\t * is notified of.\n\t */\n\tprivate readonly subscriptions: Array<AventSubscription<E>> = [];\n\t\n\t/**\n\t * Initializes a new AventNotifier.\n\t */\n\tpublic constructor() { /* Do nothing. */ }\n\t\n\t/**\n\t * Notifies all of the {@link AventSubscription}s that are live on this AventNotifier of the avent that is passed in\n\t * to this function.\n\t *\n\t * @param avent The avent to distribute to all of this AventNotifier's children AventSubscriptions.\n\t */\n\tpublic notify(avent: E): void {\n\t\t\n\t\t// Check to make sure that the filters in place aren't going to reject the avent.\n\t\tfor (let filter of this.filters) if (!filter.verify(avent)) return;\n\t\t\n\t\t// Notify all of the subscriptions.\n\t\tfor (let subscription of this.subscriptions) subscription.handleAvent(avent);\n\t\t\n\t}\n\t\n\t/**\n\t * Add a new {@link AventFilter} to this AventNotifier that will filter incoming avents.\n\t *\n\t * @param filter The new AventFilter to add to this AventNotifier.\n\t */\n\tpublic filter(filter: AventFilter<E>): void {\n\t\t\n\t\tthis.filters.push(filter);\n\t\t\n\t}\n\t\n\t/**\n\t * Creates and returns an {@link AventSubscription} to this AventNotifier that will be notified whenever avents are\n\t * dispatched on this object.\n\t *\n\t * @param handler A function that will handle the incoming avent.\n\t * @return An AventSubscription to this AventNotifier.\n\t */\n\tpublic subscribe(handler: (avent: E) => void): AventSubscription<E> {\n\t\t\n\t\tlet subscription: AventSubscription<E> = new AventSubscription<E>(this, handler);\n\t\t\n\t\tthis.subscriptions.push(subscription);\n\t\t\n\t\treturn subscription;\n\t\t\n\t}\n\t\n\t/**\n\t * Unsubscribes/unlinks the provided {@link AventSubscription} from this AventNotifier so that said subscription\n\t * will no longer be notified of any new incoming avents to this AventNotifier.\n\t *\n\t * @param subscription The AventSubscription to unsubscribe from this AventNotifier.\n\t */\n\tpublic unsubscribe(subscription: AventSubscription<E>): void {\n\t\t\n\t\tlet indexOf: number = this.subscriptions.indexOf(subscription);\n\t\tif (indexOf > -1) this.subscriptions.splice(indexOf, 1);\n\t\t\n\t}\n\t\n\t/**\n\t * Returns the number of {@link AventSubscription}s to this AventNotifier.\n\t *\n\t * @return The number of {@link AventSubscription}s to this AventNotifier.\n\t */\n\tpublic subscriptionCount(): number {\n\t\t\n\t\treturn this.subscriptions.length;\n\t\t\n\t}\n\t\n\t/**\n\t * Returns this AventNotifier as an {@link AventSource} in order to only expose it's\n\t * {@link AventNotifier#subscribe()} method.\n\t *\n\t * @return This AventNotifier as an AventSource in order to only expose it's #subscribe() method.\n\t */\n\tpublic getAsAventSource(): AventSource<E> {\n\t\t\n\t\treturn this;\n\t\t\n\t}\n\t\n}"]}