{"version":3,"sources":["../ts/avent-subscription.ts"],"names":[],"mappings":";;AAgBA,MAAa,iBAAiB;IAuB7B,YAAmB,QAA0B,EAAE,OAA2B;QAblE,YAAO,GAA0B,EAAE,CAAC;QAe3C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAExB,CAAC;IAOM,MAAM,CAAC,MAAsB;QAEnC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAE3B,CAAC;IAQM,WAAW,CAAC,KAAQ;QAG1B,KAAK,IAAI,MAAM,IAAI,IAAI,CAAC,OAAO;YAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;gBAAE,OAAO;QAGnE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAErB,CAAC;IAQM,WAAW;QAEjB,IAAI,IAAI,CAAC,QAAQ,EAAE;YAElB,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAChC,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;YAC1B,OAAO,IAAI,CAAC;SAEZ;;YAAM,OAAO,KAAK,CAAC;IAErB,CAAC;CAED;AA3ED,8CA2EC","file":"avent-subscription.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t4:55 PM -- January 16th, 2019.\n *\tProject: avents\n */\n\nimport { AventNotifier } from \"./avent-notifier\";\nimport { AventFilter } from \"./avent-filter\";\n\n/**\n * An endpoint for avents that are distributed from a given {@link AventNotifier}.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class AventSubscription<E> {\n\t\n\t/**\n\t * The {@link AventNotifier}s to which this AventSubscription is linked.\n\t */\n\tprivate notifier: AventNotifier<E> | undefined;\n\t\n\t/**\n\t * The {@link AventFilter} that have been added to this AventSubscription.\n\t */\n\tprivate filters: Array<AventFilter<E>> = [];\n\t\n\t/**\n\t * The anonymous function responsible for handling incoming avents.\n\t */\n\tprivate readonly handler: (avent: E) => void;\n\t\n\t/**\n\t * Initializes a new AventSubscription from a given {@link AventNotifier} and with a given avent handler function.\n\t *\n\t * @param notifier The 'parent' AventNotifier to which this AventSubscription is linked.\n\t * @param handler The anonymous handler function for incoming avents to this AventSubscription.\n\t */\n\tpublic constructor(notifier: AventNotifier<E>, handler: (avent: E) => void) {\n\t\t\n\t\tthis.notifier = notifier;\n\t\tthis.handler = handler;\n\t\t\n\t}\n\t\n\t/**\n\t * Add a new {@link AventFilter} to this AventSubscription that will filter incoming avents.\n\t *\n\t * @param filter The new AventFilter to add to this AventSubscription.\n\t */\n\tpublic filter(filter: AventFilter<E>): void {\n\t\t\n\t\tthis.filters.push(filter);\n\t\t\n\t}\n\t\n\t/**\n\t * Checks that the avent conforms to the filters that have been added to it and then handles the avent via its inner\n\t * handler function.\n\t *\n\t * @param avent The avent for this AventSubscription to handle.\n\t */\n\tpublic handleAvent(avent: E): void {\n\t\t\n\t\t// Check to make sure that the filters in place aren't going to reject the avent.\n\t\tfor (let filter of this.filters) if (!filter.verify(avent)) return;\n\t\t\n\t\t// Handle the avent.\n\t\tthis.handler(avent);\n\t\t\n\t}\n\t\n\t/**\n\t * Unsubscribes/unlinks this AventSubscription from it's parent AventNotifier, disabling the reception of further\n\t * avents.\n\t *\n\t * @return false if this AventSubscription had already been unsubscribed.\n\t */\n\tpublic unsubscribe(): boolean {\n\t\t\n\t\tif (this.notifier) {\n\t\t\t\n\t\t\tthis.notifier.unsubscribe(this);\n\t\t\tthis.notifier = undefined;\n\t\t\treturn true;\n\t\t\t\n\t\t} else return false;\n\t\t\n\t}\n\t\n}"]}